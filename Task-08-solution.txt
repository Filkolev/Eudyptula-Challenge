The solution is not yet reviewed and may need rework.

As usual, the first place to look is in the docs. I referred to
Documentation/filesystems/debugfs.rst which provides the basic information
needed to create directories and files under /sys/kernel/debug/.

By default, the debug directory allows access only to root; to fix that, as
required by the task, I put an entry in /etc/fstab where I provided the mode
(0755) using a mount option.

The next step was to look at include/linux/debugfs.h which defines the
functions to use and some useful macros. I also searched for users of those
functions/macros to get a better idea of how they are used throughout the
kernel.

The first task is pretty straight-forward as it uses essentially the same
file operations as Task 06. One thing I added was marking the file as being in
use while reading or writing.
To check the return values of the functions which return pointers, there are
macros defined in include/linux/err.h.

The second task is easy. The jiffies can be obtained using a function from
include/linux/jiffies.h. For such a file which only returns a single number,
debugfs.h has a macro DEFINE_DEBUGFS_ATTRIBUTE which greatly simplifies things.

The third task is equivalent to the first, but we're using a buffer which is
also writeable (I decided to use a static char array). The complication is the
need to use locking. Several documents contain information about the locks
available in the kernel, this is the one I found most useful:
Documentation/locking/locktypes.rst, along with the other files in the same
directory.
At first I used a rwlock, but the read operation failed consistently at the
point when copy_to_user() is called. A little research showed that this type of
lock is not appropriate for this context, because it is an optimized version of
a spinlock:
https://stackoverflow.com/questions/37449712/what-happens-if-copy-to-user-is-in-rw-lock
I changed this to a rw_semaphore and the error disappeared.

As usual with all submissions, I used clang-format with the config file in the
Linux source tree and checkpatch.pl to verify both the files and patches.

Verify debugfs is accessible by all users:
[filip@arch ~/programming/Eudyptula-Challenge/Task-08]$ ls -ld /sys/kernel/debug/
drwxr-xr-x 38 root root 0 Dec  3 11:09 /sys/kernel/debug/

Load module and verify files are created with correct permissions:
[filip@arch ~/programming/Eudyptula-Challenge/Task-08]$ sudo insmod hello-debugfs-module.ko
[filip@arch ~/programming/Eudyptula-Challenge/Task-08]$ ls -l /sys/kernel/debug/eudyptula/
total 0
-rw-r--r-- 1 root root 0 Dec  3 11:23 foo
-rw-rw-rw- 1 root root 0 Dec  3 11:14 id
-r--r--r-- 1 root root 0 Dec  3 11:13 jiffies

Verify id:
[filip@arch ~/programming/Eudyptula-Challenge/Task-08]$ cat /sys/kernel/debug/eudyptula/id
4b77379b10af
[filip@arch ~/programming/Eudyptula-Challenge/Task-08]$ echo asdf > /sys/kernel/debug/eudyptula/id

bash: echo: write error: Invalid argument
[filip@arch ~/programming/Eudyptula-Challenge/Task-08]$ echo 4b77379b10af > /sys/kernel/debug/eudyptula/id
bash: echo: write error: Invalid argument
[filip@arch ~/programming/Eudyptula-Challenge/Task-08]$ echo -n 4b77379b10af > /sys/kernel/debug/eudyptula/id
[filip@arch ~/programming/Eudyptula-Challenge/Task-08]$ echo $?
0

Verify jiffies:
[filip@arch ~/programming/Eudyptula-Challenge/Task-08]$ cat /sys/kernel/debug/eudyptula/jiffies
4295497585
[filip@arch ~/programming/Eudyptula-Challenge/Task-08]$ cat /sys/kernel/debug/eudyptula/jiffies
4295498380

Verify foo:
[filip@arch ~/programming/Eudyptula-Challenge/Task-08]$ cat /sys/kernel/debug/eudyptula/foo
[filip@arch ~/programming/Eudyptula-Challenge/Task-08]$ echo asdf > /sys/kernel/debug/eudyptula/foo
bash: /sys/kernel/debug/eudyptula/foo: Permission denied
[filip@arch ~/programming/Eudyptula-Challenge/Task-08]$ echo asdf | sudo tee /sys/kernel/debug/eudyptula/foo
asdf
[filip@arch ~/programming/Eudyptula-Challenge/Task-08]$ cat /sys/kernel/debug/eudyptula/foo
asdf
[filip@arch ~/programming/Eudyptula-Challenge/Task-08]$ wc test.txt
   1    1 4096 test.txt
[filip@arch ~/programming/Eudyptula-Challenge/Task-08]$ cat test.txt | sudo tee /sys/kernel/debug/eudyptula/foo
# file contains 4096 times the symbol 'a'
[filip@arch ~/programming/Eudyptula-Challenge/Task-08]$ cat /sys/kernel/debug/eudyptula/foo
# repeated 'a'
[filip@arch ~/programming/Eudyptula-Challenge/Task-08]$ cat /sys/kernel/debug/eudyptula/foo | wc
      1       1    4096

Executing as root to write directly to file; tee enters infinite loop:
[root@arch Task-08]# wc test.txt
   1    1 4097 test.txt
[root@arch Task-08]# cat test.txt > /sys/kernel/debug/eudyptula/foo
cat: write error: No space left on device
[root@arch Task-08]# cat /sys/kernel/debug/eudyptula/foo
# repeated 'a'
[root@arch Task-08]# cat /sys/kernel/debug/eudyptula/foo | wc
      0       1    4096

Unload module:
[filip@arch ~/programming/Eudyptula-Challenge/Task-08]$ sudo rmmod hello_debugfs_module
[filip@arch ~/programming/Eudyptula-Challenge/Task-08]$ ls /sys/kernel/debug/eudyptula
ls: cannot access '/sys/kernel/debug/eudyptula': No such file or directory

The final step was to figure out how to send the solution as described.
The initial version (step 1) I sent as a regular email with the source and
Makefile attached.
For the patch subjects I used a clever trick described here:
https://stackoverflow.com/questions/36185647/git-multiple-subject-prefix-with-format-patch

I used several options to git send-email to achieve the desired structure.
First, I used --in-reply-to, using the ID of the first email, then added
--thread and --chain-reply-to (as this was given as the preferred option in the
task description).
